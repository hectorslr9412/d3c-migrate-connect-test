name: Importar Recursos (Modular)

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release a importar (desde releases.json)'
        required: true
        type: choice
        options: ${{ fromJson(needs.load-options.outputs.releases_json) }}

      target_envs:
        description: 'Ambiente destino'
        required: true
        type: choice
        options: [sbx, qa, prod]

      import_all:
        description: 'Importar TODO'
        type: boolean
        default: false

      lambdas:
        description: 'Lambdas'
        type: boolean
        default: true

      flows:
        description: 'Amazon Connect Flows'
        type: boolean
        default: false

      queues:
        description: 'Amazon Connect Queues'
        type: boolean
        default: false

      users:
        description: 'Usuarios de Connect'
        type: boolean
        default: false

jobs:
  load-options:
    name: Cargar releases.json
    runs-on: ubuntu-latest
    outputs:
      releases_json: ${{ steps.parse.outputs.releases_json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Leer releases.json
        id: parse
        run: |
          if [ ! -f releases.json ]; then
            echo "[]" > releases.json
          fi

          # Extraer solo los nombres de los releases
          releases=$(jq -c '[.[].name]' releases.json)
          echo "releases_json=$releases" >> $GITHUB_OUTPUT

  import:
    name: Importar Recursos
    runs-on: ubuntu-latest
    needs: load-options
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ==============================
      # 1. CARGAR CONFIG DE DESTINO
      # ==============================
      - name: Configurar variables destino
        id: vars
        run: |
          ENV=${{ inputs.target_envs }}
          RELEASE=${{ inputs.release_name }}
          FOLDER="exports/${RELEASE}"

          if [ ! -d "$FOLDER" ]; then
            echo "Error: No existe el release $RELEASE"
            exit 1
          fi

          jq -r ".${ENV}" environments.json > env.json
          echo "accountId=$(jq -r '.accountId' env.json)" >> $GITHUB_OUTPUT
          echo "connectInstanceId=$(jq -r '.connectInstanceId' env.json)" >> $GITHUB_OUTPUT
          echo "region=$(jq -r '.region' env.json)" >> $GITHUB_OUTPUT
          echo "folder=${FOLDER}" >> $GITHUB_OUTPUT
          echo "environment=${ENV}" >> $GITHUB_OUTPUT

      # ==============================
      # 2. CONFIGURAR PYTHON Y AWS
      # ==============================
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependencias
        run: pip install boto3 requests jq

      - name: Configurar AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ steps.vars.outputs.accountId }}:role/d3c-GitHubAction-AssumeRoleWithAction
          aws-region: ${{ steps.vars.outputs.region }}
          role-session-name: import-${{ inputs.target_envs }}-${{ github.run_id }}

      # ==============================
      # 3. IMPORTAR RECURSOS
      # ==============================
      - name: Importar Lambdas
        if: ${{ inputs.import_all || inputs.lambdas }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/lambdas
        run: python import_lambdas.py

      - name: Importar Flows
        if: ${{ inputs.import_all || inputs.flows }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/Flows
          CONNECT_INSTANCE_ID: ${{ steps.vars.outputs.connectInstanceId }}
        run: python import_flows.py

      - name: Importar Queues
        if: ${{ inputs.import_all || inputs.queues }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/queues
        run: python import_queues.py

      - name: Importar Usuarios
        if: ${{ inputs.import_all || inputs.users }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/users
          CONNECT_INSTANCE_ID: ${{ steps.vars.outputs.connectInstanceId }}
        run: python import_users.py

      - name: Registrar resultado
        run: |
          echo "✅ Importación completada para ${{ inputs.release_name }} → ${{ inputs.target_envs }}"

name: Import Resources

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Exact name of the release to import (e.g., release-dev-2025-10-22)'
        required: true
        type: string
        default: release-sbx-2025-10-22

      target_envs:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, sbx, qa, prod]

      import_all:
        description: 'Import EVERYTHING'
        type: boolean
        default: false

      lambdas:
        description: 'Lambdas'
        type: boolean
        default: true

      flows:
        description: 'Amazon Connect Flows'
        type: boolean
        default: false

      queues:
        description: 'Amazon Connect Queues'
        type: boolean
        default: false

      users:
        description: 'Amazon Connect Users'
        type: boolean
        default: false

jobs:
  import:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ==============================
      # 1. LOAD TARGET CONFIGURATION
      # ==============================
      - name: Configure target variables
        id: vars
        run: |
          ENV=${{ inputs.target_envs }}
          RELEASE=${{ inputs.release_name }}
          FOLDER="exports/${RELEASE}"

          if [ ! -d "$FOLDER" ]; then
            echo "❌ Error: Release $RELEASE does not exist in exports/"
            ls exports/ || true
            exit 1
          fi

          jq -r ".${ENV}" environments.json > env.json
          echo "accountId=$(jq -r '.accountId' env.json)" >> $GITHUB_OUTPUT
          echo "connectInstanceId=$(jq -r '.connectInstanceId' env.json)" >> $GITHUB_OUTPUT
          echo "region=$(jq -r '.region' env.json)" >> $GITHUB_OUTPUT
          echo "folder=${FOLDER}" >> $GITHUB_OUTPUT
          echo "environment=${ENV}" >> $GITHUB_OUTPUT

      # ==============================
      # 2. SET UP PYTHON AND AWS
      # ==============================
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install boto3 requests jq

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ steps.vars.outputs.accountId }}:role/d3c-GitHubAction-AssumeRoleWithAction
          aws-region: ${{ steps.vars.outputs.region }}
          role-session-name: import-${{ inputs.target_envs }}-${{ github.run_id }}

      # ==============================
      # 3. IMPORT RESOURCES
      # ==============================
      - name: Import Lambdas
        if: ${{ inputs.import_all || inputs.lambdas }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/lambdas
        run: python scripts/import_lambdas.py

      - name: Import Flows
        if: ${{ inputs.import_all || inputs.flows }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/Flows
          CONNECT_INSTANCE_ID: ${{ steps.vars.outputs.connectInstanceId }}
        run: python import_flows.py

      - name: Import Queues
        if: ${{ inputs.import_all || inputs.queues }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/queues
        run: python import_queues.py

      - name: Import Users
        if: ${{ inputs.import_all || inputs.users }}
        env:
          IMPORT_FOLDER: ${{ steps.vars.outputs.folder }}/users
          CONNECT_INSTANCE_ID: ${{ steps.vars.outputs.connectInstanceId }}
        run: python import_users.py

      # ==============================
      # 4. LOG FINAL RESULT
      # ==============================
      - name: Log result
        run: echo "✅ Import completed for ${{ inputs.release_name }} → ${{ inputs.target_envs }}"
